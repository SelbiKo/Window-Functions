-- Show each author together with their articles. For each row, show the author's last name, first name and the article title. Order the results alphabetically by article title.

select au.first_name, au.last_name, ar.title as article_title
from author au
join article ar on au.id = ar.author_id
order by article_title;

-- For each article, select its title and category name. Rename the second column to category_name. Order the results alphabetically by article title.

select ar.title, ac.name as category_name
from article ar
join article_category ac
  on ar.article_category_id = ac.id
order by ar.title;

-- For each article, select its title, the traffic day, and the number of views it achieved on that day. Order the results alphabetically by article title. Within the rows for one article, order the rows chronologically by the traffic day.

select ar.title, art.day, art.views
from article ar
join article_traffic art
  on ar.url = art.url
order by ar.title, art.day;

-- For each product page, select its title and the name of its category. Order the results alphabetically by product title.

select pc.name, pp.title
from product_category pc
join product_page pp
on pc.id = pp.product_category_id
order by pp.title;

-- For each article, show its title (name the column article_title), the name of the product it generated traffic to (name the column product_title), the day, and the number of views the article generated for that product on a given day.
-- Order the results alphabetically by article title, then by product title, and, finally, chronologically by the view date.

select ar.title as article_title, pp.title as product_title, apt.day, apt.views
from article ar
join article_product_traffic apt
on ar.url = apt.article_url
join product_page pp
on pp.url = apt.product_page_url
order by ar.title, pp.title, apt.day;

-- For each article, show its URL, title, and the total number of views. Name the last column total_article_views.
-- Order the articles so that the ones with the most views are first.

select ar.title, ar.url, sum(at.views) as total_article_views
from article ar
join article_traffic at
on ar.url = at.url
group by ar.url
order by total_article_views desc;

-- For each article, show its title (name the column article_title), the related product's name (name the column product_title), and the total amount of traffic generated by this article for the product. Name the last column total_traffic_generated.
-- Order the results so that the largest amount of traffic generated is shown first.

select ar.title as article_title, pp.title as product_title, sum(apt.views) as total_traffic_generated
from article ar
join article_product_traffic apt
on ar.url = apt.article_url
join product_page pp on apt.product_page_url = pp.url
group by product_title
order by total_traffic_generated desc;

-- WINDOW FUNCTION
-- For each article and traffic day, show the URL of the article, its title, the day, and the accumulated total views from the initial publication day to the day shown in the previous column. Name the last column accumulated_article_views. Order the results by the article title. Different days for the same article should be ordered chronologically.

select ar.url, ar.title, at.day, sum(at.views) over (partition by ar.url order by at.day 
                                                    rows between unbounded preceding and current row) as accumulated_article_views
from article ar
join article_traffic at
on ar.url = at.url
order by ar.title, at.day;

-- For each author, show their ID, last name, first name, the date truncated to a month (e.g., '2021-03-01 00:00:00+00' for March 2021) and name this column month, and the total views of all the articles for that author in that month. Name the last column views_in_month.
-- Order the result so that the most recent year and month are shown first. If there are multiple results for a given year and month, order the rows with the highest number of monthly views first.

select au.id, au.last_name, au.first_name, date_trunc('month', at.day) as month,
sum(at.views) as views_in_month
from author au
join article ar on au.id=ar.author_id
join article_traffic at on ar.url=at.url
group by author_id
order by month desc, views_in_month desc;

-- For each author, show: Their id. Their last name. Their first name. The name of the category in which they've published articles. The day. The total views in the given category on that day (name the column article_views_by_day_and_category).
-- The total views on that day for that author across all the categories (name the column article_views_by_day).
-- The total accumulated views by the author from the day they published their first article up to the current day for the given category (name the column accumulated_article_views_by_category).
-- Order the results so that the authors are in alphabetical order by last name, then by first name. If there are multiple rows for the same author, order the rows by the category in ascending order and by the day so that the most recent day is first.

select au.id, au.last_name, au.first_name, ac.name, at.day, sum(at.views) as article_views_by_day_and_category,
sum(at.views) over (partition by au.id, ac.day) as article_views_by_day,
sum(sum(at.views)) over (partition by au.id, ac.id order by at.day Range between unbounded preceding and current row)
as accumulated_article_views_by_category
from author au
join article ar on au.id=ar.author_id
join article_traffic  at on ar.url=at.url
join article_category ac on ac.id=ar.article_category_id
group by author_id
order by ac.name;

-- For every article published before Dec 1, 2020, show the: URL.Title.Category name. Number of views the article received in Dec 2020. Rename this column to total_article_views. Order the results so that the most popular articles are ranked first.
select ar.url, ar.title, ac.name, sum(at.views) as total_article_views
from article ar
join article_category ac on ar.article_category_id=ac.id
join article_traffic at on at.url=ar.url
where at.day between '2020-12-01' and '2020-12-31' and ar.publication_date < '2020-12-01'
group by ar.url, ar.title
order by total_article_views desc;

